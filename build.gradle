plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'jacoco'
    id 'com.gorylenko.gradle-git-properties' version "$gitPropertiesVersion"
    id 'org.sonarqube' version "$sonarVersion"
}

group 'eus.ibai'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-mail:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"
    runtimeOnly "org.postgresql:r2dbc-postgresql:$postgresqlR2dbcVersion"
    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation "org.jsoup:jsoup:$jsoupVersion"
    implementation 'org.seleniumhq.selenium:selenium-java:4.15.0'
    implementation "io.micrometer:micrometer-core:$micrometerVersion"
    implementation "io.opentelemetry:opentelemetry-sdk:$openTelemetryVersion"
    implementation "io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:$openTelemetryVersion-alpha"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:$openTelemetryVersion"
    implementation "com.newrelic.telemetry:telemetry-core:$newrelicTelemetryVersion"
    implementation "com.newrelic.telemetry:telemetry-http-okhttp:$newrelicTelemetryVersion"

    // Version fixes for transient dependencies with vulnerabilities
    // SNYK-JAVA-ORGYAML-3152153
    implementation "org.yaml:snakeyaml:2.0"
    // SNYK-JAVA-COMSQUAREUPOKIO-5773320 -> Waiting for okhttp +4.11.0 to include okio +3.4.0
    implementation "com.squareup.okio:okio:$okioVersion"
    // SNYK-JAVA-COMSQUAREUPOKIO-5820002 -> Waiting for okhttp +4.11.0 to include okio-jvm +3.4.0
    implementation "com.squareup.okio:okio-jvm:$okioVersion"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "com.github.tomakehurst:wiremock-standalone:$wiremockVersion"
    testImplementation "com.icegreen:greenmail:$greenmailVersion"
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"
    testImplementation "io.projectreactor:reactor-test:$reactorVersion"
    testImplementation "io.r2dbc:r2dbc-h2:$h2R2dbcVersion"
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
    implementation 'org.testcontainers:selenium:1.19.1'
    testImplementation "org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13"
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.jacoco.reportPaths", "${rootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}
